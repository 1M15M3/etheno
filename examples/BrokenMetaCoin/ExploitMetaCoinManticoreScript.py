# global variable `manticore` is provided by Etheno

# No need to set up accounts or contracts the way we usually do with Manticore alone!
# They are already pre-provisioned in the `manticore` object
# and we can simply access them from there:

# The Truffle migrations deploy three contracts: [Migrations contract, ConvertLib, MetaCoin]
contract_account = list(manticore.contract_accounts.values())[2]

# The contract was loaded from bytecode, so we need to manually set the ABI:
contract_account.add_function('setMetadata(uint256,uint256)')

# Create symbolic variables for which Manticore will discover values:
key1 = manticore.make_symbolic_value(name='key1')
value1 = manticore.make_symbolic_value(name='val1')
key2 = manticore.make_symbolic_value(name='key2')

# Make two calls to the `setMetadata` function of the `MetaCoin` contract
# using the symbolic variables:
contract_account.setMetadata(key1, value1)
contract_account.setMetadata(key2, 1)

first = True
for st in manticore.all_states:
    # The value we want to overwrite is the `balances` mapping in storage slot 0
    balances_value = st.platform.get_storage_data(contract_account.address, 0)
    if st.can_be_true(balances_value == 1):
        print("\nFound a%s way to overwrite balances! Check %s" % (['nother',''][first], manticore.workspace))
        first = False
        st.constraints.add(balances_value == 1)
        k1, v1 = st.solve_one(key1), st.solve_one(value1)
        k2 = st.solve_one(key2)
        print("    setMetadata(0x%x, 0x%x)" % (k1, v1))
        print("    setMetadata(0x%x, 0x1)\n" % k2)
